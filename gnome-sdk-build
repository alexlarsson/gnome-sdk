#!/bin/sh
XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/gnome-sdk"
DEPLOY="${XDG_DATA_HOME}/deploy"
BUILD="${XDG_DATA_HOME}/build"

case `arch` in
x86_64)
        ARCH="x86_64"
        ;;
*)
        echo "Unsupported architecture"
        exit 1
        ;;
esac

show_help() {
cat << EOF
Usage: ${0##*/} [-r RUNTIME] [-b BUILD] <command> [arguments...]
Runs a command in the gnome sdk runtime.

    -h              show this help
    -r, --runtime   run with a specific runtime
    -b, --branch    run with a specific runtime branch
    -t, --target    run with the specified build dir in /self
    -c, --clear     clear the build dir before starting
    -v, --var       init /var from clean runtime Var companion
    -i, --isolated  run isolated from filesystem
    -n, --network   run with host network
    -s, --share-shm share /dev/shm with host
    -D, --system-bus share system bus in container
    -d, --session-bus share session bus in container

All runtimes are stored in ${XDK_DATA_HOME}.
The default sdk is called 'org.gnome.Sdk' and can be changed by setting GNOME_SDK_RUNTIME.
The default branch is called '3.14' and can be changed by setting GNOME_SDK_RUNTIME_BRANCH.
The default target is called 'default' and can be changed by setting GNOME_SDK_TARGET.
EOF
}

if [ "$#" == "0" ]; then
    show_help
    exit 1
fi

TARGET=${GNOME_SDK_TARGET:-default}
RUNTIME=${GNOME_SDK_RUNTIME:-org.gnome.Sdk}
BRANCH=${GNOME_SDK_RUNTIME_BRANCH:-3.14}
CLEAR=no
VAR=no
ISOLATED=-f
NETWORK=
SYSTEM_DBUS=no
SYSTEM_DBUS_OPTION=
SESSION_DBUS=no
SESSION_DBUS_OPTION=

while :; do
    case $1 in
        -h|-\?|--help)
            show_help
            exit
            ;;
        -r|--runtime)
            if [ "$2" ]; then
                RUNTIME=$2
                shift 2
                continue
            else
                echo 'ERROR: Must specify a non-empty "--runtime RUNTIME" argument.' >&2
                exit 1
            fi
            ;;
        -p|--platform)
            RUNTIME=org.gnome.Platform
            shift
            continue
            ;;
        -b|--branch)
            if [ "$2" ]; then
                BRANCH=$2
                shift 2
                continue
            else
                echo 'ERROR: Must specify a non-empty "--branch BRANCH" argument.' >&2
                exit 1
            fi
            ;;
        -t|--target)
            if [ "$2" ]; then
                TARGET=$2
                shift 2
                continue
            else
                echo 'ERROR: Must specify a non-empty "--target TARGET" argument.' >&2
                exit 1
            fi
            ;;
        -c|--clear)
            CLEAR=yes
            ;;
        -v|--var)
            VAR=yes
            ;;
        -i|--isolated)
            ISOLATED=
            ;;
        -s|--share-shm)
            SHM=-s
            ;;
        -n|--network)
            NETWORK=-n
            ;;
        -D|--system-bus)
            SYSTEM_DBUS=yes
            ;;
        -d|--session-bus)
            SESSION_DBUS=yes
            ;;
        --)
            shift
            break
            ;;
        -?*)
            printf 'Warning: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)
            break
    esac

    shift
done

declare -x ACLOCAL_PATH="/self/share/aclocal"
declare -x CPLUS_INCLUDE_PATH="/self/include"
declare -x C_INCLUDE_PATH="/self/include"
declare -x GI_TYPELIB_PATH="/self/lib/girepository-1.0"
declare -x LDFLAGS="-L/self/lib "
declare -x PKG_CONFIG_PATH="/self/lib/pkgconfig:/self/share/pkgconfig"

mkdir -p $BUILD

RUNTIME_DIR=$DEPLOY/runtime/$RUNTIME/$ARCH/$BRANCH/deploy/latest/files
VAR_DIR=$DEPLOY/runtime/${RUNTIME}Var/$ARCH/$BRANCH/deploy/latest/files

if ! test -d $RUNTIME_DIR; then
    echo "Error: Runtime '$RUNTIME' does not exist at $RUNTIME_DIR"
    exit 1
fi

APP_DIR=$BUILD/$TARGET
if [ $CLEAR != "no" ]; then
    rm -rf $APP_DIR
fi
mkdir -p $APP_DIR/var
mkdir -p $APP_DIR/files

if [ $VAR != "no" ]; then

    if ! test -d $VAR_DIR; then
        echo "Error: Runtime '${RUNTIME}Var' does not exist at $VAR_DIR"
        exit 1
    fi

    rm -rf $APP_DIR/var
    cp -a -T  $VAR_DIR $APP_DIR/var
fi

# Ensure we always have /var/tmp and /var/run
mkdir -p $APP_DIR/var/tmp
ln -snf /run $APP_DIR/var/run

X11=""
case "$DISPLAY" in
  :[0-9]*)  D=`echo $DISPLAY | sed "s/.*:\([0-9]*\).*/\1/"`;
            X11="-x /tmp/.X11-unix/X$D" ;;
esac;

PULSEAUDIO=
if [ -z "$PULSE_SERVER" ]; then
    XPROP=`xprop -root PULSE_SERVER`
    case "$XPROP" in
        PULSE_SERVER\(STRING\)*) PULSE_SERVER=`echo $XPROP | sed 's/PULSE_SERVER.* = //' | sed 's/"//'g`;;

        *) if test -S $XDG_RUNTIME_DIR/pulse/native; then PULSE_SERVER="unix:$XDG_RUNTIME_DIR/pulse/native"; fi;;
    esac
fi

case "$PULSE_SERVER" in
  *unix:*) PULSEAUDIO="-p `echo $PULSE_SERVER | sed s#.*unix:##`"
esac

if [ $SYSTEM_DBUS != "no" ]; then
    case $DBUS_SYSTEM_BUS_ADDRESS in
        unix:*path=*)
            # TODO: This should unescape the path
            SOCKET=`echo $DBUS_SYSTEM_BUS_ADDRESS | sed "s/unix:.*path=\(.*\)\(,.*\|$\)/\1/"`;
            SYSTEM_DBUS_OPTION="-D $SOCKET"
            ;;
        "")  SYSTEM_DBUS_OPTION="-D /var/run/dbus/system_bus_socket"
            ;;
    esac
fi

if [ $SESSION_DBUS != "no" ]; then
    case $DBUS_SESSION_BUS_ADDRESS in
        unix:*path=*)
            # TODO: This should unescape the path
            SOCKET=`echo $DBUS_SESSION_BUS_ADDRESS | sed "s/unix:.*path=\(.*\)\(,.*\|$\)/\1/"`;
            SESSION_DBUS_OPTION="-d $SOCKET"
            ;;
    esac
fi

gnome-sdk-helper -i $SHM $X11 $SESSION_DBUS_OPTION $SYSTEM_DBUS_OPTION $PULSEAUDIO $ISOLATED $NETWORK -w -a $APP_DIR/files -v $APP_DIR/var $RUNTIME_DIR "$@"
